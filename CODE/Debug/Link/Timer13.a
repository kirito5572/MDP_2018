;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;char seg[10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7C,0x27,0x7F,0x67};

	.DSEG
;int n1 = 0, n10 = 0, num = 0, i = 0;
;void main(void) {
; 0000 0005 void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0006     DDRB = 0xff;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0007     DDRF = 0xff;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0008     TIMSK = 0x60;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0009     TCCR2 = 0x64;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000A     OCR2 = 100;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000B     TCNT2 = 0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 000C     SREG = 0x80;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 000D     while(1);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 000E }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;interrupt [TIM2_OVF] void timer_int2(void) {
; 0000 000F interrupt [11] void timer_int2(void) {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0010     n1 = num % 10; n10 = num / 10;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0011     for(i = 0 ; i < 244 ; i++) {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0012         PORTF = 0xff;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0013         PORTB = seg[n1];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0014         PORTF = 0xfe;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0015         delay_ms(2);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0016         PORTF = 0xff;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0017         PORTB = seg[n10];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0018         PORTF = 0xfd;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0019         if(num > 99) num = 0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 001A         delay_ms(2);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 001B     }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 001C     num++;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 001D }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
