;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;char seg_part[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};

	.DSEG
;int sec = 0, min = 0, count =0, msec;
;int run = 0;
;void FND();
;void main(void) {
; 0000 0007 void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0008     DDRB = 0xff;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0009     DDRF = 0xff;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000A     SREG = 0x80;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 000B     TIMSK = 0x01;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 000C     TCCR0 = 0b00000100;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 000D     TCNT0 = 6;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 000E     EIMSK = 0b00110000;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 000F     EICRB = 0b00001010;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0010     while(1) {
;PCODE: $0000001E VOL: 0
; 0000 0011         FND();
;PCODE: $0000001F VOL: 0
; 0000 0012     }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0013 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;void FND(void) {
; 0000 0014 void FND(void) {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0015     unsigned char nd, st, mnd,mst,sst,snd;
; 0000 0016     nd = sec / 10;
;PCODE: $00000027 VOL: 0
;	nd -> R17
;	st -> R16
;	mnd -> R19
;	mst -> R18
;	sst -> R21
;	snd -> R20
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0017     st = sec % 10;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0018     mnd = min / 10;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0019     mst = min % 10;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 001A     snd = msec / 10;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 001B     sst = msec % 10;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 001C     PORTF = 0b11101111;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 001D     PORTB = seg_part[mnd];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 001E     delay_us(1000);
;PCODE: $00000047 VOL: 0
; 0000 001F     PORTF = 0xff;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0020     PORTF = 0b11011111;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0021     PORTB = seg_part[mst];
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0022     delay_us(1000);
;PCODE: $00000051 VOL: 0
; 0000 0023     PORTF = 0xff;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0024     PORTF = 0b10111111;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0025     PORTB = seg_part[nd];
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0026     delay_us(1000);
;PCODE: $0000005B VOL: 0
; 0000 0027     PORTF = 0xff;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0028     PORTF = 0b01111111;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0029     PORTB = seg_part[st];
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 002A     delay_us(1000);
;PCODE: $00000065 VOL: 0
; 0000 002B     PORTF = 0xff;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 002C     PORTF = 0b11111110;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 002D     PORTB = seg_part[snd];
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 002E     delay_us(1000);
;PCODE: $0000006F VOL: 0
; 0000 002F     PORTF = 0xff;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0030     PORTF = 0b11111101;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0031     PORTB = seg_part[sst];
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0032     delay_us(1000);
;PCODE: $00000079 VOL: 0
; 0000 0033     PORTF = 0xff;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0034 }
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;interrupt [TIM0_OVF] void time0(void) {
; 0000 0035 interrupt [17] void time0(void) {
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0036     if(run == 1) {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0037         count++;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0038         if(count == 10) {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0039             msec++;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 003A             if(msec == 100) {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 003B                 sec++;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 003C                 if(sec == 100) {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 003D                     sec = 0;
;PCODE: $00000097 VOL: 0
; 0000 003E                     min++;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 003F                     if(min == 60) min = 0;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0040                 }
;PCODE: $0000009F VOL: 0
; 0000 0041                 msec = 0;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0042             }
; 0000 0043             count = 0;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0044         }
; 0000 0045     }
;PCODE: $000000A4 VOL: 0
; 0000 0046 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;interrupt [EXT_INT4] void stop(void) {
; 0000 0047 interrupt [6] void stop(void) {
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0048     run ^= 1;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0049 }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;interrupt [EXT_INT5] void reset(void) {
; 0000 004A interrupt [7] void reset(void) {
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 004B     sec = 0;
;PCODE: $000000B3 VOL: 0
; 0000 004C     min = 0;
;PCODE: $000000B4 VOL: 0
; 0000 004D     msec = 0;
;PCODE: $000000B5 VOL: 0
; 0000 004E }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
