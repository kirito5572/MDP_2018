
AVRASM ver. 2.1.30  D:\MDP_2018\CODE\Debug\List\LCD.asm Tue Jul 17 19:03:14 2018

D:\MDP_2018\CODE\Debug\List\LCD.asm(1097): warning: Register r5 already defined by the .DEF directive
D:\MDP_2018\CODE\Debug\List\LCD.asm(1098): warning: Register r4 already defined by the .DEF directive
D:\MDP_2018\CODE\Debug\List\LCD.asm(1099): warning: Register r7 already defined by the .DEF directive
D:\MDP_2018\CODE\Debug\List\LCD.asm(1100): warning: Register r6 already defined by the .DEF directive
D:\MDP_2018\CODE\Debug\List\LCD.asm(1101): warning: Register r9 already defined by the .DEF directive
D:\MDP_2018\CODE\Debug\List\LCD.asm(1102): warning: Register r8 already defined by the .DEF directive
D:\MDP_2018\CODE\Debug\List\LCD.asm(1103): warning: Register r11 already defined by the .DEF directive
D:\MDP_2018\CODE\Debug\List\LCD.asm(1104): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.32a Evaluation
                 ;(C) Copyright 1998-2017 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _data=R5
                 	.DEF _scan=R4
                 	.DEF _xcount=R7
                 	.DEF _key=R6
                 	.DEF _count=R9
                 	.DEF __lcd_x=R8
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\MDP_2018\CODE\Debug\List\LCD.asm(1157): warning: .cseg .db misalignment - padding zero byte
00004f 0000      	.DB  0x0
                 
                 _0x3:
000050 2010
000051 8040      	.DB  0x10,0x20,0x40,0x80
                 _0x2000003:
000052 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000053 0001      	.DW  0x01
000054 0007      	.DW  0x07
000055 009e      	.DW  __REG_VARS*2
                 
000056 0004      	.DW  0x04
000057 0500      	.DW  _key_scan
000058 00a0      	.DW  _0x3*2
                 
000059 0002      	.DW  0x02
00005a 0504      	.DW  __base_y_G100
00005b 00a4      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005d 94f8      	CLI
00005e 27ee      	CLR  R30
00005f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000060 e0f1      	LDI  R31,1
000061 bff5      	OUT  MCUCR,R31
000062 bfe5      	OUT  MCUCR,R30
000063 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006c e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006d e0a0      	LDI  R26,LOW(__SRAM_START)
00006e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006f 93ed      	ST   X+,R30
000070 9701      	SBIW R24,1
000071 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000072 eae6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000073 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000074 9185      	LPM  R24,Z+
000075 9195      	LPM  R25,Z+
000076 9700      	SBIW R24,0
000077 f061      	BREQ __GLOBAL_INI_END
000078 91a5      	LPM  R26,Z+
000079 91b5      	LPM  R27,Z+
00007a 9005      	LPM  R0,Z+
00007b 9015      	LPM  R1,Z+
00007c 01bf      	MOVW R22,R30
00007d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007e 9005      	LPM  R0,Z+
00007f 920d      	ST   X+,R0
000080 9701      	SBIW R24,1
000081 f7e1      	BRNE __GLOBAL_INI_LOOP
000082 01fb      	MOVW R30,R22
000083 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000084 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000085 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000086 bfed      	OUT  SPL,R30
000087 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000088 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000089 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008a e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008b 940c 008d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;void scanning();
                 ;void FND();
                 ;
                 ;unsigned char data, scan, xcount=0, key_scan[4] = {0x10, 0x20, 0x40, 0x80}, key;
                 
                 	.DSEG
                 ;char count;
                 ;
                 ;void main(void) {
                 ; 0000 000B void main(void) {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000C     DDRA = 0xf0;
00008d efe0      	LDI  R30,LOW(240)
00008e bbea      	OUT  0x1A,R30
                 ; 0000 000D     DDRB = 0x0f;
00008f e0ef      	LDI  R30,LOW(15)
000090 bbe7      	OUT  0x17,R30
                 ; 0000 000E     DDRD = 0xff;
000091 efef      	LDI  R30,LOW(255)
000092 bbe1      	OUT  0x11,R30
                 ; 0000 000F     lcd_init(16);
000093 e1a0      	LDI  R26,LOW(16)
000094 d0ce      	RCALL _lcd_init
                 ; 0000 0010     lcd_clear();
000095 d0b0      	RCALL _lcd_clear
                 ; 0000 0011 
                 ; 0000 0012     while (1) {
                 _0x4:
                 ; 0000 0013         scanning();
000096 d01b      	RCALL _scanning
                 ; 0000 0014         lcd_gotoxy(xcount,0);
000097 927a      	ST   -Y,R7
000098 e0a0      	LDI  R26,LOW(0)
000099 d09a      	RCALL _lcd_gotoxy
                 ; 0000 0015         lcd_putchar(count);
00009a 2da9      	MOV  R26,R9
00009b d0b4      	RCALL _lcd_putchar
                 ; 0000 0016         delay_ms(5);
00009c e0a5      	LDI  R26,LOW(5)
00009d e0b0      	LDI  R27,0
00009e d130      	RCALL _delay_ms
                 ; 0000 0017         if(key != 0) {
00009f 2066      	TST  R6
0000a0 f049      	BREQ _0x7
                 ; 0000 0018             while(1) {
                 _0x8:
                 ; 0000 0019                 if((PINA & 0x0f) == 0) {
0000a1 b3e9      	IN   R30,0x19
0000a2 70ef      	ANDI R30,LOW(0xF)
0000a3 f411      	BRNE _0xB
                 ; 0000 001A                     key = 0;
0000a4 2466      	CLR  R6
                 ; 0000 001B                     break;
0000a5 c004      	RJMP _0xA
                 ; 0000 001C                 }
                 ; 0000 001D                 delay_ms(5);
                 _0xB:
0000a6 e0a5      	LDI  R26,LOW(5)
0000a7 e0b0      	LDI  R27,0
0000a8 d126      	RCALL _delay_ms
                 ; 0000 001E             }
0000a9 cff7      	RJMP _0x8
                 _0xA:
                 ; 0000 001F         }
                 ; 0000 0020         if(xcount == 16) {
                 _0x7:
0000aa e1e0      	LDI  R30,LOW(16)
0000ab 15e7      	CP   R30,R7
0000ac f411      	BRNE _0xC
                 ; 0000 0021             lcd_clear();
0000ad d098      	RCALL _lcd_clear
                 ; 0000 0022             xcount = 0;
0000ae 2477      	CLR  R7
                 ; 0000 0023         }
                 ; 0000 0024         FND();
                 _0xC:
0000af d056      	RCALL _FND
                 ; 0000 0025     }
0000b0 cfe5      	RJMP _0x4
                 ; 0000 0026 }
                 _0xD:
0000b1 cfff      	RJMP _0xD
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void scanning() {
                 ; 0000 002A void scanning() {
                 _scanning:
                 ; .FSTART _scanning
                 ; 0000 002B     scan = ++scan % 4;
0000b2 9443      	INC  R4
0000b3 2de4      	MOV  R30,R4
0000b4 e0f0      	LDI  R31,0
0000b5 e0a3      	LDI  R26,LOW(3)
0000b6 e0b0      	LDI  R27,HIGH(3)
0000b7 d10d      	RCALL __MANDW12
0000b8 2e4e      	MOV  R4,R30
                 ; 0000 002C     switch(scan) {
0000b9 e0f0      	LDI  R31,0
                 ; 0000 002D         case 0: PORTA = key_scan[scan]; data = 1; break;
0000ba 9730      	SBIW R30,0
0000bb f419      	BRNE _0x11
0000bc d0d1      	RCALL SUBOPT_0x0
0000bd e0e1      	LDI  R30,LOW(1)
0000be c014      	RJMP _0x1F
                 ; 0000 002E         case 1: PORTA = key_scan[scan]; data = 4; break;
                 _0x11:
0000bf 30e1      	CPI  R30,LOW(0x1)
0000c0 e0a0      	LDI  R26,HIGH(0x1)
0000c1 07fa      	CPC  R31,R26
0000c2 f419      	BRNE _0x12
0000c3 d0ca      	RCALL SUBOPT_0x0
0000c4 e0e4      	LDI  R30,LOW(4)
0000c5 c00d      	RJMP _0x1F
                 ; 0000 002F         case 2: PORTA = key_scan[scan]; data = 7; break;
                 _0x12:
0000c6 30e2      	CPI  R30,LOW(0x2)
0000c7 e0a0      	LDI  R26,HIGH(0x2)
0000c8 07fa      	CPC  R31,R26
0000c9 f419      	BRNE _0x13
0000ca d0c3      	RCALL SUBOPT_0x0
0000cb e0e7      	LDI  R30,LOW(7)
0000cc c006      	RJMP _0x1F
                 ; 0000 0030         case 3: PORTA = key_scan[scan]; data = 10; break;
                 _0x13:
0000cd 30e3      	CPI  R30,LOW(0x3)
0000ce e0a0      	LDI  R26,HIGH(0x3)
0000cf 07fa      	CPC  R31,R26
0000d0 f419      	BRNE _0x10
0000d1 d0bc      	RCALL SUBOPT_0x0
0000d2 e0ea      	LDI  R30,LOW(10)
                 _0x1F:
0000d3 2e5e      	MOV  R5,R30
                 ; 0000 0031     }
                 _0x10:
                 ; 0000 0032     delay_ms(5);
0000d4 e0a5      	LDI  R26,LOW(5)
0000d5 e0b0      	LDI  R27,0
0000d6 d0f8      	RCALL _delay_ms
                 ; 0000 0033     if(PINA.0 == 1) {
0000d7 9bc8      	SBIS 0x19,0
0000d8 c00c      	RJMP _0x15
                 ; 0000 0034         count = data + '0';
0000d9 2de5      	MOV  R30,R5
0000da 5de0      	SUBI R30,-LOW(48)
0000db 2e9e      	MOV  R9,R30
                 ; 0000 0035         if(data == 10) {
0000dc e0ea      	LDI  R30,LOW(10)
0000dd 15e5      	CP   R30,R5
0000de f411      	BRNE _0x16
                 ; 0000 0036             count = '*';
0000df e2ea      	LDI  R30,LOW(42)
0000e0 2e9e      	MOV  R9,R30
                 ; 0000 0037         }
                 ; 0000 0038         xcount++;
                 _0x16:
0000e1 9473      	INC  R7
                 ; 0000 0039         key = 1;
0000e2 e0e1      	LDI  R30,LOW(1)
0000e3 2e6e      	MOV  R6,R30
                 ; 0000 003A     } else if(PINA.1 == 1) {
0000e4 c020      	RJMP _0x17
                 _0x15:
0000e5 9bc9      	SBIS 0x19,1
0000e6 c011      	RJMP _0x18
                 ; 0000 003B         count = 1 + data + '0';
0000e7 2de5      	MOV  R30,R5
0000e8 5cef      	SUBI R30,-LOW(49)
0000e9 2e9e      	MOV  R9,R30
                 ; 0000 003C         if(data == 10) {
0000ea e0ea      	LDI  R30,LOW(10)
0000eb 15e5      	CP   R30,R5
0000ec f411      	BRNE _0x19
                 ; 0000 003D             count = 0 + '0';
0000ed e3e0      	LDI  R30,LOW(48)
0000ee 2e9e      	MOV  R9,R30
                 ; 0000 003E         }
                 ; 0000 003F         if(data == 10) {count = 0 + '0';}
                 _0x19:
0000ef e0ea      	LDI  R30,LOW(10)
0000f0 15e5      	CP   R30,R5
0000f1 f411      	BRNE _0x1A
0000f2 e3e0      	LDI  R30,LOW(48)
0000f3 2e9e      	MOV  R9,R30
                 ; 0000 0040         xcount++;
                 _0x1A:
0000f4 9473      	INC  R7
                 ; 0000 0041         key = 1;
0000f5 e0e1      	LDI  R30,LOW(1)
0000f6 2e6e      	MOV  R6,R30
                 ; 0000 0042     } else if(PINA.2 == 1) {
0000f7 c00d      	RJMP _0x1B
                 _0x18:
0000f8 9bca      	SBIS 0x19,2
0000f9 c00b      	RJMP _0x1C
                 ; 0000 0043         count = 2 + data + '0';
0000fa 2de5      	MOV  R30,R5
0000fb 5cee      	SUBI R30,-LOW(50)
0000fc 2e9e      	MOV  R9,R30
                 ; 0000 0044         if(data == 10) {
0000fd e0ea      	LDI  R30,LOW(10)
0000fe 15e5      	CP   R30,R5
0000ff f411      	BRNE _0x1D
                 ; 0000 0045             count = '#';
000100 e2e3      	LDI  R30,LOW(35)
000101 2e9e      	MOV  R9,R30
                 ; 0000 0046         }
                 ; 0000 0047         xcount++;
                 _0x1D:
000102 9473      	INC  R7
                 ; 0000 0048         key = 1;
000103 e0e1      	LDI  R30,LOW(1)
000104 2e6e      	MOV  R6,R30
                 ; 0000 0049     } else {
                 _0x1C:
                 ; 0000 004A 
                 ; 0000 004B     }
                 _0x1B:
                 _0x17:
                 ; 0000 004C }
000105 9508      	RET
                 ; .FEND
                 ;void FND() {
                 ; 0000 004D void FND() {
                 _FND:
                 ; .FSTART _FND
                 ; 0000 004E     unsigned char st;
                 ; 0000 004F     st = (count-'0')% 10;
000106 931a      	ST   -Y,R17
                 ;	st -> R17
000107 2de9      	MOV  R30,R9
000108 e0f0      	LDI  R31,0
000109 97f0      	SBIW R30,48
00010a 01df      	MOVW R26,R30
00010b e0ea      	LDI  R30,LOW(10)
00010c e0f0      	LDI  R31,HIGH(10)
00010d d0a9      	RCALL __MODW21
00010e 2f1e      	MOV  R17,R30
                 ; 0000 0050     PORTB = st;
00010f bb18      	OUT  0x18,R17
                 ; 0000 0051 }
000110 c07b      	RJMP _0x2080001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000111 931a      	ST   -Y,R17
000112 2f1a      	MOV  R17,R26
000113 b3e2      	IN   R30,0x12
000114 70ef      	ANDI R30,LOW(0xF)
000115 2fae      	MOV  R26,R30
000116 2fe1      	MOV  R30,R17
000117 7fe0      	ANDI R30,LOW(0xF0)
000118 2bea      	OR   R30,R26
000119 bbe2      	OUT  0x12,R30
                +
00011a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00011b 958a     +DEC R24
00011c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00011d 9a92      	SBI  0x12,2
                +
00011e e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00011f 958a     +DEC R24
000120 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000121 9892      	CBI  0x12,2
                +
000122 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000123 958a     +DEC R24
000124 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000125 c066      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000126 93aa      	ST   -Y,R26
000127 81a8      	LD   R26,Y
000128 dfe8      	RCALL __lcd_write_nibble_G100
000129 81e8          ld    r30,y
00012a 95e2          swap  r30
00012b 83e8          st    y,r30
00012c 81a8      	LD   R26,Y
00012d dfe3      	RCALL __lcd_write_nibble_G100
                +
00012e ec88     +LDI R24 , LOW ( 200 )
00012f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000130 9701     +SBIW R24 , 1
000131 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000132 9621      	ADIW R28,1
000133 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000134 931a      	ST   -Y,R17
000135 930a      	ST   -Y,R16
000136 2f1a      	MOV  R17,R26
000137 810a      	LDD  R16,Y+2
000138 2fe1      	MOV  R30,R17
000139 e0f0      	LDI  R31,0
00013a 5fec      	SUBI R30,LOW(-__base_y_G100)
00013b 4ffa      	SBCI R31,HIGH(-__base_y_G100)
00013c 81e0      	LD   R30,Z
00013d 0fe0      	ADD  R30,R16
00013e 2fae      	MOV  R26,R30
00013f dfe6      	RCALL __lcd_write_data
000140 2e80      	MOV  R8,R16
000141 2eb1      	MOV  R11,R17
000142 8119      	LDD  R17,Y+1
000143 8108      	LDD  R16,Y+0
000144 9623      	ADIW R28,3
000145 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000146 e0a2      	LDI  R26,LOW(2)
000147 d04d      	RCALL SUBOPT_0x1
000148 e0ac      	LDI  R26,LOW(12)
000149 dfdc      	RCALL __lcd_write_data
00014a e0a1      	LDI  R26,LOW(1)
00014b d049      	RCALL SUBOPT_0x1
00014c e0e0      	LDI  R30,LOW(0)
00014d 2ebe      	MOV  R11,R30
00014e 2e8e      	MOV  R8,R30
00014f 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000150 931a      	ST   -Y,R17
000151 2f1a      	MOV  R17,R26
000152 301a      	CPI  R17,10
000153 f011      	BREQ _0x2000005
000154 148a      	CP   R8,R10
000155 f038      	BRLO _0x2000004
                 _0x2000005:
000156 e0e0      	LDI  R30,LOW(0)
000157 93ea      	ST   -Y,R30
000158 94b3      	INC  R11
000159 2dab      	MOV  R26,R11
00015a dfd9      	RCALL _lcd_gotoxy
00015b 301a      	CPI  R17,10
00015c f179      	BREQ _0x2080001
                 _0x2000004:
00015d 9483      	INC  R8
00015e 9a90      	SBI  0x12,0
00015f 2fa1      	MOV  R26,R17
000160 dfc5      	RCALL __lcd_write_data
000161 9890      	CBI  0x12,0
000162 c029      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000163 931a      	ST   -Y,R17
000164 2f1a      	MOV  R17,R26
000165 b3e1      	IN   R30,0x11
000166 6fe0      	ORI  R30,LOW(0xF0)
000167 bbe1      	OUT  0x11,R30
000168 9a8a      	SBI  0x11,2
000169 9a88      	SBI  0x11,0
00016a 9a89      	SBI  0x11,1
00016b 9892      	CBI  0x12,2
00016c 9890      	CBI  0x12,0
00016d 9891      	CBI  0x12,1
00016e 2ea1      	MOV  R10,R17
00016f 2fe1      	MOV  R30,R17
000170 58e0      	SUBI R30,-LOW(128)
                +
000171 93e0 0506+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000173 2fe1      	MOV  R30,R17
000174 54e0      	SUBI R30,-LOW(192)
                +
000175 93e0 0507+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000177 e1a4      	LDI  R26,LOW(20)
000178 e0b0      	LDI  R27,0
000179 d055      	RCALL _delay_ms
00017a d01e      	RCALL SUBOPT_0x2
00017b d01d      	RCALL SUBOPT_0x2
00017c d01c      	RCALL SUBOPT_0x2
00017d e2a0      	LDI  R26,LOW(32)
00017e df92      	RCALL __lcd_write_nibble_G100
                +
00017f e980     +LDI R24 , LOW ( 400 )
000180 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000181 9701     +SBIW R24 , 1
000182 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000183 e2a8      	LDI  R26,LOW(40)
000184 dfa1      	RCALL __lcd_write_data
000185 e0a4      	LDI  R26,LOW(4)
000186 df9f      	RCALL __lcd_write_data
000187 e8a5      	LDI  R26,LOW(133)
000188 df9d      	RCALL __lcd_write_data
000189 e0a6      	LDI  R26,LOW(6)
00018a df9b      	RCALL __lcd_write_data
00018b dfba      	RCALL _lcd_clear
                 _0x2080001:
00018c 9119      	LD   R17,Y+
00018d 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _key_scan:
000500           	.BYTE 0x4
                 __base_y_G100:
000504           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00018e 2de4      	MOV  R30,R4
00018f e0f0      	LDI  R31,0
000190 50e0      	SUBI R30,LOW(-_key_scan)
000191 4ffb      	SBCI R31,HIGH(-_key_scan)
000192 81e0      	LD   R30,Z
000193 bbeb      	OUT  0x1B,R30
000194 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000195 df90      	RCALL __lcd_write_data
000196 e0a3      	LDI  R26,LOW(3)
000197 e0b0      	LDI  R27,0
000198 c036      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
000199 e3a0      	LDI  R26,LOW(48)
00019a df76      	RCALL __lcd_write_nibble_G100
                +
00019b e980     +LDI R24 , LOW ( 400 )
00019c e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00019d 9701     +SBIW R24 , 1
00019e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00019f 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGW1:
0001a0 95f1      	NEG  R31
0001a1 95e1      	NEG  R30
0001a2 40f0      	SBCI R31,0
0001a3 9508      	RET
                 
                 __DIVW21U:
0001a4 2400      	CLR  R0
0001a5 2411      	CLR  R1
0001a6 e190      	LDI  R25,16
                 __DIVW21U1:
0001a7 0faa      	LSL  R26
0001a8 1fbb      	ROL  R27
0001a9 1c00      	ROL  R0
0001aa 1c11      	ROL  R1
0001ab 1a0e      	SUB  R0,R30
0001ac 0a1f      	SBC  R1,R31
0001ad f418      	BRCC __DIVW21U2
0001ae 0e0e      	ADD  R0,R30
0001af 1e1f      	ADC  R1,R31
0001b0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001b1 60a1      	SBR  R26,1
                 __DIVW21U3:
0001b2 959a      	DEC  R25
0001b3 f799      	BRNE __DIVW21U1
0001b4 01fd      	MOVW R30,R26
0001b5 01d0      	MOVW R26,R0
0001b6 9508      	RET
                 
                 __MODW21:
0001b7 94e8      	CLT
0001b8 ffb7      	SBRS R27,7
0001b9 c004      	RJMP __MODW211
0001ba 95b1      	NEG  R27
0001bb 95a1      	NEG  R26
0001bc 40b0      	SBCI R27,0
0001bd 9468      	SET
                 __MODW211:
0001be fdf7      	SBRC R31,7
0001bf dfe0      	RCALL __ANEGW1
0001c0 dfe3      	RCALL __DIVW21U
0001c1 01fd      	MOVW R30,R26
0001c2 f40e      	BRTC __MODW212
0001c3 dfdc      	RCALL __ANEGW1
                 __MODW212:
0001c4 9508      	RET
                 
                 __MANDW12:
0001c5 94e8      	CLT
0001c6 fff7      	SBRS R31,7
0001c7 c002      	RJMP __MANDW121
0001c8 dfd7      	RCALL __ANEGW1
0001c9 9468      	SET
                 __MANDW121:
0001ca 23ea      	AND  R30,R26
0001cb 23fb      	AND  R31,R27
0001cc f40e      	BRTC __MANDW122
0001cd dfd2      	RCALL __ANEGW1
                 __MANDW122:
0001ce 9508      	RET
                 
                 _delay_ms:
0001cf 9610      	adiw r26,0
0001d0 f039      	breq __delay_ms1
                 __delay_ms0:
0001d1 95a8      	wdr
                +
0001d2 ea80     +LDI R24 , LOW ( 0xFA0 )
0001d3 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
0001d4 9701     +SBIW R24 , 1
0001d5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0001d6 9711      	sbiw r26,1
0001d7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001d8 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   9 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   8 r6 :   5 r7 :   6 
r8 :   4 r9 :   9 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  22 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  22 r25:   8 r26:  49 r27:  14 r28:   3 r29:   1 r30: 110 r31:  21 
x  :   3 y  :  17 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   3 and   :   2 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   3 cpi   :   5 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   3 inc   :   6 jmp   :  36 ld    :   6 ldd   :   3 
ldi   :  79 lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  37 
movw  :   7 mul   :   0 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 
or    :   1 ori   :   1 out   :  13 pop   :   0 push  :   0 rcall :  41 
ret   :  12 reti  :   0 rjmp  :  20 rol   :   3 ror   :   0 sbc   :   1 
sbci  :   4 sbi   :   5 sbic  :   0 sbis  :   3 sbiw  :  10 sbr   :   1 
sbrc  :   1 sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  13 std   :   0 sts   :   3 sub   :   1 subi  :   7 
swap  :   1 tst   :   1 wdr   :   1 
Instructions used: 52 out of 117 (44.4%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003b2    900     46    946  131072   0.7%
[.dseg] 0x000100 0x000508      0      8      8    4096   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
